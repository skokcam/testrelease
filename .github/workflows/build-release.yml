# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world! > file1.txt

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build, > file2.txt
          echo test, and deploy your project. >> file2.txt
          
      # Get current commit sha (https://stackoverflow.com/questions/57968497/how-do-i-set-an-env-var-with-a-bash-expression-in-github-actions)
      - name: Get SHA
        run:  echo "sha_short=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV

      # Zip files
      - name: Zip release files
        run:  zip ./build-${{ env.sha_short }}.zip file1.txt file2.txt
        
      # Create release text from commit message (https://stackoverflow.com/questions/3357280/print-commit-message-of-a-given-commit-in-git)
      - name: Create release message
        run:  echo "This is an automated release triggered by commit #" > ./release_msg.txt
              echo ${{ env.sha_short }} >> ./release_msg.txt
              echo -e "\n\n" >> ./release_msg.txt
              echo "git log --format=%B -n 1 HEAD" >> ./relase_msg.txt
       
      # Create release (https://github.com/actions/upload-release-asset)
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.sha_short }}
          release_name: Release ${{ env.sha_short }}
          draft: false
          prerelease: false
          bodypath: ./release_msg.txt 

      # Upload release asset (https://github.com/actions/upload-release-asset)    
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build-${{ env.sha_short }}.zip
          asset_name: build-${{ env.sha_short }}.zip
          asset_content_type: application/zip
